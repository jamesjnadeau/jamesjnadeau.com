extends ../../templates/impress

block vars
  -var title = 'James J Nadeau | Demo Presentation'
  -var description = 'A demo presntation using impress.js'

block content
  //- see https://impress.js.org/#/bored
  //- style="position: absolute; transform-origin: left top; transition: all 1000ms ease-in-out 500ms; transform-style: preserve-3d; top: 50%; left: 50%; perspective: 1073.38px; transform: scale(0.931641);"
  #impress()
    div()
    //
      Here is where interesting thing start to happen.
      Each step of the presentation should be an element inside the `#impress` with a class name
      of `step`. These step elements are positioned, rotated and scaled by impress.js, and
      the 'camera' shows them on each step of the presentation.
      Positioning information is passed through data attributes.
      In the example below we only specify x and y position of the step element with `data-x="-1000"`
      and `data-y="-1500"` attributes. This means that **the center** of the element (yes, the center)
      will be positioned in point x = -1000px and y = -1500px of the presentation 'canvas'.
      It will not be rotated or scaled.
      --------
      Plugins: For first slide, set the autoplay time to a custom 10 seconds.
    #bored.step.slid(data-x="-1000" data-y="-1500" data-autoplay="10" data-z="0" )
      q
        | Aren’t you just 
        b bored
        |  with all those slides-based presentations?
    //
      The `id` attribute of the step element is used to identify it in the URL, but it's optional.
      If it is not defined, it will get a default value of `step-N` where N is a number of slide.
      So in the example below it'll be `step-2`.
      The hash part of the url when this step is active will be `#/step-2`.
      You can also use `#step-2` in a link, to point directly to this particular step.
      Please note, that while `#/step-2` (with slash) would also work in a link it's not recommended.
      Using classic `id`-based links like `#step-2` makes these links usable also in fallback mode.
    #step-2.step.slide(data-x="0" data-y="-1500" data-z="0")
      q
        | Don’t you think that presentations given 
        strong in modern browsers
        |  shouldn’t 
        strong copy the limits
        |  of ‘classic’ slide decks?
    #step-3.step.slide(data-x="1000" data-y="-1500" data-z="0")
      q
        | Would you like to 
        strong impress your audience
        |  with 
        strong stunning visualization
        |  of your talk?
    //
      This is an example of step element being scaled.
      Again, we use a `data-` attribute, this time it's `data-scale="4"`, so it means that this
      element will be 4 times larger than the others.
      From presentation and transitions point of view it means, that it will have to be scaled
      down (4 times) to make it back to its correct size.
    #title.step(data-x="0" data-y="0" data-scale="4" data-z="0")
      span.try then you should try
      h1
        | impress.js
        sup *
      span.footnote
        sup *
        |  no rhyme intended
    //
      This element introduces rotation.
      Notation shouldn't be a surprise. We use `data-rotate="90"` attribute, meaning that this
      element should be rotated by 90 degrees clockwise.
    #its.step(data-x="850" data-y="3000" data-rotate="90" data-scale="5" data-z="0")
      p
        | It’s a 
        strong presentation tool
        br
        |         inspired by the idea behind 
        a(href="http://prezi.com") prezi.com
        br
        |         and based on the 
        strong power of CSS3 transforms and transitions
        |  in modern browsers.
    #big.step(data-x="3500" data-y="2100" data-rotate="180" data-scale="6" data-z="0")
      p
        | visualize your 
        b big
        span.thoughts thoughts
    //
      And now it gets really exciting! We move into third dimension!
      Along with `data-x` and `data-y`, you can define the position on third (Z) axis, with
      `data-z`. In the example below we use `data-z="-3000"` meaning that element should be
      positioned far away from us (by 3000px).
    #tiny.step(data-x="2825" data-y="2325" data-z="-3000" data-rotate="300" data-scale="1")
      p
        | and 
        b tiny
        |  ideas
    //
      This step here doesn't introduce anything new when it comes to data attributes, but you
      should notice in the demo that some words of this text are being animated.
      It's a very basic CSS transition that is applied to the elements when this step element is
      reached.
      At the very beginning of the presentation all step elements are given the class of `future`.
      It means that they haven't been visited yet.
      When the presentation moves to given step `future` is changed to `present` class name.
      That's how animation on this step works - text moves when the step has `present` class.
      Finally when the step is left the `present` class is removed from the element and `past`
      class is added.
      So basically every step element has one of three classes: `future`, `present` and `past`.
      Only one current step has the `present` class.
      Note: data-x/y/z attributes, if not defined, by default will inherit the value of the
      previous step. So to get back to 0 on the z-axis, we must set it to 0.
      See src/plugins/rel/README.md for more information.
    #ing.step(data-x="3500" data-y="-850" data-z="0" data-rotate="270" data-scale="6" )
      p
        | by 
        b.positioning positioning
        | , 
        b.rotating rotating
        |  and 
        b.scaling scaling
        |  them on an infinite canvas
    #imagination.step(data-x="6700" data-y="-300" data-scale="6" data-z="0" )
      p
        | the only 
        b limit
        |  is your 
        b.imagination imagination
    #source.step(data-x="6300" data-y="2000" data-rotate="20" data-scale="4" data-z="0" )
      p want to know more?
      q
        a(href="http://github.com/impress/impress.js") use the source
        | , Luke!
    #one-more-thing.step(data-x="6000" data-y="4000" data-scale="2" data-z="0" )
      p one more thing...
    //
      And the last one shows full power and flexibility of impress.js.
      You can not only position element in 3D, but also rotate it around any axis.
      So this one here will get rotated by -40 degrees (40 degrees anticlockwise) around X axis and
      10 degrees (clockwise) around Y axis.
      You can of course rotate it around Z axis with `data-rotate-z` - it has exactly the same effect
      as `data-rotate` (these two are basically aliases).
    #its-in-3d.step(data-x="6200" data-y="4300" data-z="-100" data-rotate-x="-40" data-rotate-y="10" data-scale="2" )
      p
        span.have have
        span.you you
        span.noticed noticed
        span.its it’s
        span.in in
        b
          | 3D
          sup *
        | ?
      span.footnote * beat that, prezi ;)
    //
      So to summarize of all the possible attributes used to position presentation steps, we have:
      * `data-x`, `data-y`, `data-z` - they define the position of **the center** of step element on
      the canvas in pixels; their default value is 0;
      * `data-rotate-x`, `data-rotate-y`, 'data-rotate-z`, `data-rotate` - they define the rotation of
      the element around given axis in degrees; their default value is 0; `data-rotate` and `data-rotate-z`
      are exactly the same;
      * `data-scale` - defines the scale of step element; default value is 1
      These values are used by impress.js in CSS transformation functions, so for more information consult
      CSS transfrom docs: https://developer.mozilla.org/en/CSS/transform
    #overview.step(data-x="3000" data-y="1500" data-z="0" data-scale="10" )


  #impress-toolbar
    span#impress-toolbar-group-0
      button#impress-navigation-ui-prev.impress-navigation-ui(title="Previous") <
      //- select#impress-navigation-ui-select.impress-navigation-ui(title="Go to")
        option(value="bored") bored
        option(value="step-2") step-2
        option(value="step-3") step-3
        option(value="title") title
        option(value="its") its
        option(value="big") big
        option(value="tiny") tiny
        option(value="ing") ing
        option(value="imagination") imagination
        option(value="source") source
        option(value="one-more-thing") one-more-thing
        option(value="its-in-3d") its-in-3d
        option(value="overview") overview
      button#impress-navigation-ui-next.impress-navigation-ui(title="Next") >
    span#impress-toolbar-group-10
      button#impress-autoplay-playpause.impress-autoplay(title="Autoplay" style="width: 27px; height: 23px;") ▶
