{"version":3,"sources":["../src/html-to-ast.js"],"names":[],"mappings":"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","file":"html-to-ast.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport hast from \"hast\";\nimport traverse from \"traverse\";\nimport StructuredSource from \"structured-source\";\nimport {nodeTypes, tagNameToType} from \"./mapping\";\n/**\n * Remove undocumented properties on TxtNode from node\n * @param {TxtNode} node already has loc,range\n */\nfunction removeUnusedProperties(node) {\n    if (typeof node !== \"object\") {\n        return;\n    }\n    [\"position\"].forEach(function (key) {\n        if (node.hasOwnProperty(key)) {\n            delete node[key];\n        }\n    });\n}\nfunction mapNodeType(node, parent) {\n    if (parent) {\n        let parentNode = parent.parent.node;\n        if (parentNode.tagName === \"script\" || parentNode.tagName === \"style\") {\n            return \"CodeBlock\";\n        }\n    }\n    if (node.tagName && node.type === \"element\") {\n        let mappedType = tagNameToType[node.tagName];\n        if (mappedType) {\n            // p => Paragraph...\n            return mappedType;\n        } else {\n            // other element is \"Html\"\n            return \"Html\";\n        }\n    } else {\n        // text => Str\n        return nodeTypes[node.type];\n    }\n}\nexport function parse(html) {\n    const ast = hast.parse(html);\n    const src = new StructuredSource(html);\n    const tr = traverse(ast);\n    tr.forEach(function (node) {\n        if (this.notLeaf) {\n            // avoid conflict <input type=\"text\" />\n            // AST node has type and position\n            if (node.type && node.position) {\n                // case: element => Html or ...\n                node.type = mapNodeType(node, this.parent);\n            } else if (node.type === \"root\") {\n                // FIXME: workaround, should fix hast\n                node.type = nodeTypes[node.type];\n                const position = src.rangeToLocation([0, html.length]);\n                // reverse adjust\n                node.position = {\n                    start: {line: position.start.line, column: position.start.column + 1},\n                    end: {line: position.end.line, column: position.end.column + 1}\n                };\n            }\n            // Unknown type\n            if (typeof node.type === \"undefined\") {\n                node.type = \"UNKNOWN\";\n            }\n            // map `range`, `loc` and `raw` to node\n            if (typeof node.position === \"object\") {\n                let position = node.position;\n                // TxtNode's line start with 1\n                // TxtNode's column start with 0\n                let positionCompensated = {\n                    start: {line: position.start.line, column: position.start.column - 1},\n                    end: {line: position.end.line, column: position.end.column - 1}\n                };\n                let range = src.locationToRange(positionCompensated);\n                node.loc = positionCompensated;\n                node.range = range;\n                node.raw = html.slice(range[0], range[1]);\n            }\n            // map `url` to Link node\n            if (node.type === \"Link\" && typeof node.properties.href !== \"undefined\") {\n                node.url = node.properties.href;\n            }\n        }\n        removeUnusedProperties(node);\n    });\n    return ast;\n}\n\n"]}