{
  "name": "static-site-loader",
  "version": "0.1.0",
  "description": "a simple static site loader for webpack that's easy to use and customize to your liking",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jamesjnadeau/static-site-loader.git"
  },
  "keywords": [
    "webpack",
    "static",
    "site",
    "generator"
  ],
  "author": {
    "name": "James J Nadeau"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jamesjnadeau/static-site-loader/issues"
  },
  "dependencies": {
    "async": "^1.5.0",
    "filewalker": "^0.1.2",
    "loader-utils": "^0.2.12",
    "path": "^0.12.7"
  },
  "gitHead": "62939aeddb5dc88a625b72032b7cc9a98b9779ea",
  "readme": "# static-site-loader\nA simple static site loader for webpack that you can customize to your liking.\nIt makes it easy to iterate over a file system, or interject content from any source you desire.\nThen you control the output path of your generated files. I built this so I could easily hook\nwhat I needed into the webpack build step.\n\n## Example Usage\n\nThe following is an example use case, you can change and tweak it to your liking, or do something crazy on your own.\n\nLet's say you have a project with a folder `content` that contains your sites files in markdown(or whatever you want to write your content in). These files happen to be structured how you would like your site to be structured.\n\n#### House keeping\nYou will need to add a index.js file to content: `content/index.js`. What's in it is up to you, it just needs to be there so webpack can open the folder.\n\n#### Code it up\nHere's a basic setup that will recursively parse those files and dump them into the `built` directory as a static site to do with as you please... upload to s3, view with `webpack-dev-server --content-base public/`, the possibilites are endless :sailboat:\n\n*webpack.config.js:*\n\n```js\nvar pathUtil = require('path');\nvar marked = require('marked');\nvar jade = require('jade');\n\nmodule.exports = {\n  ...\n  entry: {\n    'site-generator': 'static-site-loader!./content',\n    ...\n  },\n  output: {\n    path: 'built',\n    ...\n  }\n  ...\n  //These are custom options used to configure your site generator instance\n  //all of these function are called via .apply, so you will have this available to you\n  //as you would with a normal loader\n  staticSiteLoader: {\n  //perform any preprocessing tasks you might need here.\n  //compile a template to use, read some config settings from ./conten/index.js as source\n    preProcess: function(source, path) {\n      //watch the content directory for changes\n      this.addContextDependency(path);\n      //define the template file we'll use\n      var template = 'template.jade';\n      //watch the template for changes\n      this.addDependency(template);\n      //Compile the template and store it to this for later use\n      this.template = jade.compileFile(template, { pretty: false });\n    }\n    //Test if a file should be processed or not, should return a Boolean;\n    testToInclude: function(path, stats, absPath) {\n      //only use files that have the markdown extentsion\n      return pathUtil.extname(path) === '.md';\n    },\n    //Rewrite the url path used when written to output.path\n    rewriteUrlPath: function(path, stats, absPath) {\n      //strip out the extension\n      var urlPath = path.slice(0, -3);\n      //rewrite /index to be just /, making index.md files become the folder index properly\n      urlPath = urlPath.replace('index', '');\n      return urlPath;\n    },\n    processFile: function(file, content) {\n      var content = marked(content.replace(picoCMSMetaPattern, ''));\n      return this.template({content: content});\n    }\n    ....\n    // or you can do the following for async content generation\n    processFile: function(file, content, callback) {\n      var content = marked(content.replace(picoCMSMetaPattern, ''));\n      callback(this.template({content: content}));\n    }\n    ....\n    postProcess: function(files) {\n      // do something after all the files have been processed\n      // ex. collect links in previous steps and output an rss feed or site map\n    }\n  }\n};\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jamesjnadeau/static-site-loader#readme",
  "_id": "static-site-loader@0.1.0",
  "_shasum": "49619f536163d2c928a90805548fc0608153554d",
  "_from": "git+https://github.com/jamesjnadeau/static-site-loader.git",
  "_resolved": "git+https://github.com/jamesjnadeau/static-site-loader.git#62939aeddb5dc88a625b72032b7cc9a98b9779ea"
}
